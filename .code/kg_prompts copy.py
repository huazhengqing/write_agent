

kg_extraction_prompt = """
# 角色
你是一位专攻知识图谱构建的专家级信息提取AI。

# 任务
从给定的文本中, 以 `(主语, 关系, 宾语)` 的形式, 提取所有高质量、信息丰富、事实准确的知识三元组。

# 原则: 
1.  实体: 主语、宾语需明确。
    - 类型: 命名实体、事物、术语、概念等。
    - 规范: 同一实体指称需统一。
    - 完整: 实体名称保持完整。
2.  关系: 精确描述实体间联系。
    - 具体: 避免模糊关系, 优先使用具体动词。
    - 属性: 实体属性视为关系。例如, "[角色A]是[状态A]" → `("[角色A]", "状态是", "[状态A]")`
3.  事实: 忠于原文, 避免推断和常识。
4.  信息: 避免重复, 合并信息。
5.  变更: 状态变化应转化为最终状态或变更的三元组。例如, "将[角色A]的[属性A]从[组织A]改为[组织B]" →  `("[角色A]", "脱离", "[组织A]")` 和 `("[角色A]", "加入", "[组织B]")`

# 工作流程: 
1.  识别: 识别文本中的实体。
2.  解析: 分析实体关系, 确定关系描述。注意状态变更词语。
3.  消解: 将代词替换为实体名称。
4.  构建: 按 `(主语, 关系, 宾语)` 格式生成三元组列表。

# 示例: 
- 文本: "在[地点], [实体A]以[方式]与[实体B]互动。"
- 输出: `[("[实体A]", "[互动方式]", "[实体B]"), ("[实体A]", "位于", "[地点]")]`

# 输出要求
- 数量: 不超过 {max_triplets_per_chunk} 个。
- 格式: Python 的元组列表 `List[Tuple[str, str, str]]`。
- 空结果: 文本中没有有效信息, 返回空列表 `[]`。
- 纯净输出: 仅返回三元组列表, 无任何额外内容。

# 指令
请严格遵循以上规则, 从以下文本中提取知识三元组。
文本:
---
{text}
---
"""


response_template = """
生成的 Cypher 查询:
{query}

Cypher 响应:
{response}
"""


summarization_template = """
你是一个助手, 帮助形成友好且易于人类理解的答案。
“信息”部分包含你必须用来构建答案的所提供信息。
所提供的信息是权威的, 永远不要怀疑它或试图用你的内部知识来纠正它。
如果所提供的信息为空, 请说你不知道答案。
让答案听起来像是对问题的回应。不要提及你是根据给定信息得出结果的。
这是一个例子: 

问题: ANC机场和SEA机场之间的航班里程是多少?
信息: 
[{"r.dist": 1440}]
有帮助的回答: 
ANC机场和SEA机场之间的飞行距离是1440英里。

在生成答案时请遵循此示例。
问题: 
{question}
信息: 
{context}
有帮助的回答: 
"""


