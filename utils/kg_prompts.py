from typing import List, Literal, Tuple


entities = Literal[
    # --- 文档类型 ---
    "小说", "故事", "剧本", "报告", "工具书", "设计文档",

    # --- 通用核心实体 ---
    "人物", "组织", "地点", "事件", "物品", "概念", "技能", "种族", "时间点",

    # --- 叙事结构与层级 ---
    "大纲", "卷纲", "章纲", "细纲", "卷", "幕", "章节", "场景", "场次", "节拍", 
    "情节", "冲突", "转折点", "伏笔", "悬念", "线索", "对话", "动作",

    # --- 角色与世界观 ---
    "动机", "情感状态", "关系", "情感弧光", "世界观", "力量体系", "法则", "地图", "年表",

    # --- 创作理论与风格 ---
    "叙事理论", "叙事结构", "叙事视角", "叙事节奏", "主题", "写作风格", "意象",

    # --- 网文与产品特征 ---
    "爽点", "金手指", "核心卖点", "读者画像", "对标作品",

    # --- 非虚构类实体 ---
    "产品", "市场", "技术", "数据", "图表", "表格", "指标", "趋势",
    "发现", "结论", "术语", "定义", "示例", "API", "函数", "类", "模块", 
    "参数", "返回值", "异常", "配置", "命令", "文件"
]

relations = Literal[
    # --- 结构与归属 ---
    "包含", "是_的一部分", "属于", "位于", "定义了", "源于", "基于", "体现", "拥有", "别名是", "关于",

    # --- 因果与时序 ---
    "导致", "影响", "发生在", "发生于", "先于", "后于", "记录了",

    # --- 状态与属性 ---
    "状态是", "能力是", "特征是", "目的是", "象征", "目标是", "值是", "单位是", "格式是", "定义是",

    # --- 动态行为 ---
    "创造了", "摧毁了", "遇见", "学习", "使用", "调用", "返回", "抛出", "读取", "写入",
    "前往", "揭示", "隐藏", "执行", "配置了",

    # --- 叙事与角色关系 ---
    "父亲是", "母亲是", "兄弟姐妹是", "配偶是", "敌人是", "朋友是", "盟友是", "对手是", 
    "上级是", "下属是", "爱慕", "憎恨", "嫉妒", "忠于", "背叛", "说了", "指向", "采用",

    # --- 非虚构与产品关系 ---
    "引用", "展示了", "对比", "验证", "依赖于", "实现了", "对标", "面向"
]

validation_schema: List[Tuple[str, str, str]] = [
    # --- 元数据与顶层设计 ---
    ("设计文档", "定义了", "世界观"),
    ("设计文档", "定义了", "力量体系"),
    ("设计文档", "定义了", "人物"),
    ("设计文档", "定义了", "组织"),
    ("设计文档", "定义了", "写作风格"),
    ("设计文档", "定义了", "主题"),
    ("设计文档", "包含", "大纲"),
    ("设计文档", "包含", "卷纲"),
    ("设计文档", "包含", "章纲"),
    ("设计文档", "包含", "细纲"),
    ("小说", "基于", "设计文档"),
    ("故事", "基于", "设计文档"),
    ("剧本", "基于", "设计文档"),
    ("报告", "基于", "设计文档"),
    ("工具书", "基于", "设计文档"),

    # --- 叙事层级结构 ---
    ("小说", "包含", "卷"),
    ("故事", "包含", "幕"),
    ("卷", "包含", "章节"),
    ("幕", "包含", "场景"),
    ("章节", "包含", "场景"),
    ("场景", "包含", "节拍"),
    ("节拍", "包含", "动作"),
    ("节拍", "包含", "对话"),
    ("卷", "是_的一部分", "小说"),
    ("幕", "是_的一部分", "故事"),
    ("章节", "是_的一部分", "卷"),
    ("场景", "是_的一部分", "章节"),
    ("场景", "是_的一部分", "幕"),
    ("节拍", "是_的一部分", "场景"),

    # --- 大纲层级结构 ---
    ("大纲", "包含", "章节"),
    ("卷纲", "是_的一部分", "大纲"),
    ("卷纲", "包含", "章纲"),
    ("章纲", "是_的一部分", "卷纲"),
    ("章纲", "包含", "细纲"),
    ("细纲", "是_的一部分", "章纲"),
    ("细纲", "定义了", "节拍"),
    ("细纲", "定义了", "场景"),
    ("章纲", "定义了", "场景"),
    ("卷纲", "定义了", "章节"),

    # --- 剧本结构 ---
    ("剧本", "包含", "场次"),
    ("剧本", "包含", "人物"),
    ("场次", "包含", "动作"),
    ("场次", "包含", "对话"),
    ("场次", "发生于", "地点"),
    ("人物", "说了", "对话"),
    ("人物", "执行", "动作"),

    # --- 人物关系与状态 ---
    ("人物", "属于", "组织"),
    ("人物", "拥有", "物品"),
    ("人物", "拥有", "技能"),
    ("人物", "拥有", "金手指"),
    ("人物", "别名是", "概念"),
    ("人物", "位于", "地点"),
    ("人物", "目标是", "动机"),
    ("人物", "状态是", "情感状态"),
    ("人物", "体现", "情感弧光"),
    ("人物", "父亲是", "人物"),
    ("人物", "母亲是", "人物"),
    ("人物", "兄弟姐妹是", "人物"),
    ("人物", "配偶是", "人物"),
    ("人物", "朋友是", "人物"),
    ("人物", "敌人是", "人物"),
    ("人物", "盟友是", "人物"),
    ("人物", "对手是", "人物"),
    ("人物", "上级是", "人物"),
    ("人物", "下属是", "人物"),
    ("人物", "忠于", "人物"),
    ("人物", "忠于", "组织"),
    ("人物", "背叛", "人物"),
    ("人物", "背叛", "组织"),

    # --- 动态行为 ---
    ("人物", "遇见", "人物"),
    ("人物", "前往", "地点"),
    ("人物", "使用", "物品"),
    ("人物", "使用", "技能"),
    ("人物", "使用", "金手指"),
    ("人物", "学习", "技能"),
    ("人物", "创造了", "物品"),
    ("人物", "创造了", "概念"),
    ("人物", "摧毁了", "物品"),
    ("人物", "摧毁了", "地点"),
    ("组织", "创造了", "事件"),

    # --- 情节、因果与悬念 ---
    ("事件", "发生在", "场景"),
    ("事件", "发生于", "时间点"),
    ("事件", "导致", "事件"),
    ("事件", "导致", "情感状态"),
    ("事件", "影响", "人物"),
    ("事件", "影响", "组织"),
    ("事件", "揭示", "线索"),
    ("事件", "揭示", "伏笔"),
    ("情节", "包含", "事件"),
    ("情节", "包含", "冲突"),
    ("情节", "包含", "爽点"),
    ("情节", "体现", "主题"),
    ("情节", "基于", "叙事结构"),
    ("伏笔", "是_的一部分", "情节"),
    ("伏笔", "指向", "转折点"),
    ("悬念", "源于", "事件"),
    ("悬念", "指向", "线索"),
    ("冲突", "源于", "动机"),
    ("冲突", "发生在", "事件"),
    ("线索", "指向", "人物"),
    ("线索", "指向", "地点"),
    ("线索", "指向", "事件"),
    ("转折点", "是_的一部分", "情节"),

    # --- 世界观与设定 ---
    ("世界观", "包含", "力量体系"),
    ("世界观", "包含", "法则"),
    ("世界观", "包含", "种族"),
    ("世界观", "包含", "地图"),
    ("世界观", "包含", "年表"),
    ("力量体系", "定义了", "技能"),
    ("金手指", "能力是", "技能"),
    ("组织", "位于", "地点"),
    ("地点", "是_的一部分", "地图"),
    ("年表", "记录了", "事件"),
    ("种族", "拥有", "技能"),

    # --- 创作理论与风格 ---
    ("小说", "采用", "叙事结构"),
    ("小说", "采用", "叙事视角"),
    ("小说", "采用", "写作风格"),
    ("场景", "体现", "叙事节奏"),
    ("写作风格", "影响", "场景"),
    ("写作风格", "影响", "对话"),
    ("主题", "象征", "意象"),
    ("意象", "是_的一部分", "写作风格"),

    # --- 网文与产品特征 ---
    ("设计文档", "定义了", "核心卖点"),
    ("设计文档", "定义了", "读者画像"),
    ("设计文档", "定义了", "对标作品"),
    ("小说", "面向", "读者画像"),
    ("小说", "对标", "对标作品"),
    ("小说", "拥有", "核心卖点"),

    # --- 报告与分析 (非虚构) ---
    ("报告", "包含", "发现"),
    ("报告", "包含", "结论"),
    ("报告", "包含", "图表"),
    ("报告", "包含", "表格"),
    ("报告", "关于", "市场"),
    ("报告", "关于", "产品"),
    ("报告", "关于", "技术"),
    ("报告", "引用", "数据"),
    ("发现", "基于", "数据"),
    ("结论", "基于", "发现"),
    ("图表", "展示了", "数据"),
    ("表格", "展示了", "数据"),
    ("数据", "包含", "指标"),
    ("指标", "关于", "产品"),
    ("指标", "关于", "市场"),
    ("趋势", "影响", "市场"),
    ("趋势", "基于", "数据"),
    ("市场", "包含", "产品"),
    ("产品", "使用", "技术"),

    # --- 技术文档 (非虚构) ---
    ("工具书", "关于", "技术"),
    ("API", "包含", "函数"),
    ("模块", "包含", "类"),
    ("模块", "包含", "函数"),
    ("类", "包含", "函数"),
    ("函数", "拥有", "参数"),
    ("函数", "返回", "返回值"),
    ("函数", "抛出", "异常"),
    ("函数", "调用", "函数"),
    ("函数", "依赖于", "模块"),
    ("配置", "配置了", "产品"),
    ("配置", "配置了", "技术"),
    ("命令", "执行", "动作"),
    ("文件", "包含", "配置"),
    ("文件", "包含", "函数"),
    ("示例", "展示了", "API"),
    ("示例", "展示了", "函数"),
    ("术语", "定义是", "定义"),
]


kg_extraction_prompt = """
# 角色
你是一位专攻知识图谱构建的专家级信息提取AI。

# 任务
从给定的文本中，以 `(主语, 关系, 宾语)` 的形式，提取所有高质量、信息丰富、事实准确的知识三元组。

# 核心原则 (必须严格遵守)
1.  实体规范化:
    - 实体定义: 主语和宾语必须是明确的实体。这包括：命名实体（人名、地名、组织）、具体事物（物品、功法）、技术术语（函数名、API、协议）、以及关键抽象概念（市场规模、增长率）。
    - 唯一性与消歧: 尽可能将同一实体的不同称谓（如“龙傲天”、“他”、“主角”）归一到最完整的实体名称上。
    - 完整性: 实体名称应保持完整，例如“青云宗”而非“青云”。

2.  关系精确性:
    - 具体动词: 关系（谓语）应使用描述实体间具体联系的动词或动词短语。优先使用具体的动词（如“击败”、“创立”、“位于”），避免使用模糊的“是”、“有”、“关于”。
    - 属性即关系: 将实体的属性也视为一种关系。例如，“龙傲天是炼气期”应提取为 `("龙傲天", "修为是", "炼气期")`。

3.  事实为本:
    - 忠于原文: 仅提取文本中明确陈述的事实。禁止进行主观推断或引入外部知识。
    - 忽略常识: 不要提取普遍的、非特定于文本的常识性信息（例如，`("天空", "是", "蓝色")`）。

4.  信息密度:
    - 避免冗余: 如果多个句子描述同一事实，只提取一次。
    - 合并信息: 将关于同一主语和关系的多条信息合并。

5.  处理修正与删除 (新规则):
    - 当文本包含明确的修正或删除指令时（如“删除...”、“修正为...”、“不再是...”），将其转换为一个表示最终状态或变化的三元组。
    - 例如，"删除'龙傲天是青云宗弟子'的设定" 或 "龙傲天不再是青云宗弟子"，可以提取为 `("龙傲天", "已离开", "青云宗")` 或 `("龙傲天", "关系结束", "青云宗")`。
    - 例如，"将龙傲天的门派从青云宗改为北冥魔殿"，应提取为 `("龙傲天", "已离开", "青云宗")` 和 `("龙傲天", "加入", "北冥魔殿")`。
    - 这种方式通过添加新事实来记录状态的变更，而不是真正删除信息。

# 提取流程
1.  识别实体: 通读文本，识别出所有符合实体定义的关键实体。
2.  解析关系: 分析实体之间的关系，包括动作、属性、从属等，并确定最精确的动词短语作为关系。特别注意表示状态变更的词语。
3.  指代消解: 在构建三元组前， mentally 解析所有代词（如“他”、“她”、“它”、“他们”），并用其指代的具体实体名称替换。
4.  构建三元组: 按照 `(主语, 关系, 宾语)` 的格式构建三元组列表。

# 示例分析 (请根据文本类型自动调整提取策略)

## 示例1: 小说/叙事文本
- 文本: "黄昏时分，在[地点A]的'[地点B]'，[角色A]展开了一张指向[地点C]的[物品A]。这张[物品A]是他在[组织A]的师父[角色B]所赠。"
- 最终三元组:
  - ("[角色A]", "位于", "[地点B]")
  - ("[地点B]", "位于", "[地点A]")
  - ("[角色A]", "展开", "[物品A]")
  - ("[物品A]", "指向", "[地点C]")
  - ("[角色B]", "赠送给", "[角色A]")
  - ("[角色B]", "是师父", "[角色A]")
  - ("[角色A]", "属于", "[组织A]")
  - ("[角色B]", "属于", "[组织A]")

## 示例2: 报告/分析文本
- 文本: "根据[机构A]的[年份A]报告，[国家A]的[行业A]市场的规模达到了[数值A]，并预测将在[年份B]增长至[数值B]。"
- 最终三元组:
  - ("[国家A]的[行业A]市场", "规模是", "[数值A]")
  - ("[数值A]", "统计年份", "[年份A]")
  - ("[国家A]的[行业A]市场", "预测规模", "[数值B]")
  - ("[数值B]", "预测年份", "[年份B]")
  - ("[国家A]的[行业A]市场", "数据来源", "[机构A]报告")

## 示例3: 技术手册/工具书
- 文本: "在[技术栈A]中，`[函数A]` Hook是一个函数，它允许你在函数组件中添加和管理状态(state)。它返回一个状态值和一个更新该值的函数。"
- 最终三元组:
  - ("[函数A] Hook", "属于", "[技术栈A]")
  - ("[函数A] Hook", "类型是", "函数")
  - ("[函数A] Hook", "允许", "在函数组件中管理状态")
  - ("[函数A] Hook", "返回", "状态值")
  - ("[函数A] Hook", "返回", "更新函数")

## 示例4: 表格 (Table) 数据
- 文本:
-  "| 姓名 | 组织   | 职位 |\n|---|---|---|\n| [角色A] | [组织A]   | [职位A] |\n| [角色B] | [组织B]   | [职位B] |"
- 最终三元组:
  - ("[角色A]", "属于", "[组织A]")
  - ("[角色A]", "职位是", "[职位A]")
  - ("[角色B]", "属于", "[组织B]")
  - ("[角色B]", "职位是", "[职位B]")

## 示例5: JSON 数据
- 文本:
-  '{ "character": "[角色A]", "alias": "[别名A]", "occupation": "[职业A]", "affiliation": { "name": "[组织A]", "role": "创始人" } }'
- 最终三元组:
  - ("[角色A]", "别名是", "[别名A]")
  - ("[角色A]", "职业是", "[职业A]")
  - ("[角色A]", "属于", "[组织A]")
  - ("[组织A]", "创始人是", "[角色A]")

## 示例6: 关系图 (Mermaid) 数据
- 文本:
""" + "```" + """mermaid
graph TD
    [角色A] -- 宿敌是 --> [角色B];
    [角色A] -- 属于 --> [组织A];
""" + "```" + """
- 最终三元组:
  - ("[角色A]", "宿敌是", "[角色B]")
  - ("[角色A]", "属于", "[组织A]")

## 劣质示例
- 文本: "他很强大。"
- 劣质三元组:
  - ("他", "是", "强大")  # 错误: 使用了代词"他"；"强大"是形容词而非实体；"是"关系模糊。
- 文本: "[角色A]去了[组织A]。"
- 劣质三元组:
  - ("[角色A]", "去", "地方") # 错误: "地方"不是命名实体，信息密度太低。应为 `("[角色A]", "前往", "[组织A]")`。

# 输出要求
- 数量限制: 提取的三元组数量不应超过 {max_triplets_per_chunk} 个。
- 格式: 必须返回一个 Python 的元组列表 `List[Tuple[str, str, str]]`。
- 空结果: 如果文本中没有可提取的有效信息, 必须返回一个空列表 `[]`。
- 无额外内容: 除了三元组列表，不要包含任何解释、注释或代码块标记。

# 指令
现在，请严格遵循以上所有规则，从以下文本中提取知识三元组。
文本:
---
{text}
---
"""


response_template = """
生成的 Cypher 查询:
{query}

Cypher 响应:
{response}
"""


summarization_template = """
你是一个助手，帮助形成友好且易于人类理解的答案。
“信息”部分包含你必须用来构建答案的所提供信息。
所提供的信息是权威的，永远不要怀疑它或试图用你的内部知识来纠正它。
如果所提供的信息为空，请说你不知道答案。
让答案听起来像是对问题的回应。不要提及你是根据给定信息得出结果的。
这是一个例子：

问题：ANC机场和SEA机场之间的航班里程是多少？
信息：
[{"r.dist": 1440}]
有帮助的回答：
ANC机场和SEA机场之间的飞行距离是1440英里。

在生成答案时请遵循此示例。
问题：
{question}
信息：
{context}
有帮助的回答：
"""


kg_gen_cypher_prompt = """
# 任务
为图数据库生成 Cypher 查询语句。

# 指令
- 严格使用 Schema: 只能使用 Schema 中提供的关系类型和属性。
- 纯净输出: 不要包含任何解释、注释或与 Cypher 语句无关的文本。
- 最终输出: 仅输出单行 Cypher 查询语句, 或在问题无法回答时输出 "INVALID_QUERY"。
- 实体匹配: 优先使用属性进行精确匹配, 例如 `{name: "实体名"}`。
- 关系方向: 对不确定的关系使用无方向匹配 `-[r]-`, 对明确的因果或动作使用有方向匹配 `->`。
- 字符串安全: 如果实体名称包含双引号(`"`), 必须用反斜杠(`\\`)转义。

# Schema
---
{schema}
---

# 查询策略与示例

## 1. 基础查询 (1-hop)
- 用户问题: '实体"[实体A]"和"[实体B]"是什么关系?'
- Cypher 查询: `MATCH (a:__Entity__ {name: "[实体A]"})-[r]-(b:__Entity__ {name: "[实体B]"}) RETURN type(r)`

## 2. 多跳查询 (Multi-hop)
- 用户问题: '[实体A]的宿敌的组织是什么？'
- Cypher 查询: `MATCH (a:__Entity__ {name: "[实体A]"})-[:宿敌是]-(enemy:__Entity__)-[:属于]->(faction:__Entity__) RETURN faction.name`

## 3. 聚合查询 (Aggregation)
- 用户问题: '[组织A]有多少个成员?'
- Cypher 查询: `MATCH (p:__Entity__)-[:属于]->(s:__Entity__ {name: "[组织A]"}) RETURN count(p)`

## 4. 排序与限制 (Sorting & Limiting)
- 用户问题: '列出与[实体A]关系最多的前3个实体。'
- Cypher 查询: `MATCH (a:__Entity__ {name:"[实体A]"})-[r]-(b:__Entity__) RETURN b.name, count(r) AS relationship_count ORDER BY relationship_count DESC LIMIT 3`

## 5. 上下文查询 (Contextual)
- 场景: `图谱 Schema` 中包含 `Event` 节点和 `date` 属性。
- 用户问题: '[年份A]在[地点A]发生了什么事件?'
- Cypher 查询: `MATCH (e:Event)-[:位于]->(l:__Entity__ {name: "[地点A]"}) WHERE e.date STARTS WITH '[年份A]' RETURN e.name`

## 6. 属性查询 (Property)
- 用户问题: '介绍一下实体"[实体A]"'
- Cypher 查询: `MATCH (n:__Entity__ {name: "[实体A]"}) RETURN properties(n)`

# 问题
{question}
"""

