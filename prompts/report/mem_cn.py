



"""




"""


custom_fact_extraction_prompt = f"""
# 目标
将输入内容(小说正文、设计文档、任务规划)转换为结构化的“事实”(Fact)列表, 并封装在JSON中, 确保信息完整性和检索精确性。


# 输出要求
- 格式: 必须输出合法JSON格式 `{{"facts": ["fact1", "fact2", ...]}}`
- 无事实时: `{{"facts": []}}`
- 转义: 特殊字符(如 `"` 和 `\\`)必须正确转义
- 严格要求: 输出必须是纯JSON字符串, 不能是字典对象或其他格式
- 禁止: 不要输出任何非JSON格式的内容或解释性文字


# 事实(Fact)结构
- 结构: `[层级] [摘要] [原文] [标签] [关联]`
- 层级: 标识内容位置, 如 `[层级: 全书 | 卷x | 幕x | 章x | 场景x | 节拍x | 段落x]`。
- 摘要: 概括核心信息(动作、状态、设定)。
- 原文: 
    - 特殊字符必需转义。
    - JSON必需转为文本, 英文键名翻译为中文, 清晰表述嵌套或列表。
    - Markdown保留格式。
- 标签: 提取核心实体, 如 `#类别:实体`。
- 关联: 描述关系(前置、后续、依赖)。


# 输入处理指南
- 分割: 按语义完整单元(情节点、设计模块、任务项)分割输入, 每个单元生成一个事实。

## 小说正文
- 分割: 按情节完整性(情节点、场景、完整对话), 保持场景连贯
- 关联: 记录因果关系和时间顺序
- 标签: 重点标记角色动作、情感变化、情节发展
    - 类别
        - 内容类型: `#情节`, `#对话`, `#描写`, `#内心独白`, `#回忆`, `#伏笔`
        - 叙事功能: `#开端`, `#发展`, `#高潮`, `#结局`, `#转折`, `#悬念`
    - 角色
        - 角色实体: `#角色:姓名`
        - 性格特征: `#性格:内向`, `#性格:冲动`, `#性格:智慧`
        - 情感状态: `#情感:愤怒`, `#情感:悲伤`, `#情感:喜悦`, `#情感:恐惧`
        - 关系变化: `#关系:敌对`, `#关系:友好`, `#关系:暧昧`, `#关系:背叛`
        - 成长阶段: `#成长:觉醒`, `#成长:蜕变`, `#成长:挫折`
    - 世界观
        - 地点: `#地点:具体名称`
        - 组织: `#组织:具体名称`
        - 物品: `#物品:具体名称`
        - 规则: `#规则:魔法体系`, `#规则:社会制度`, `#规则:物理法则`
        - 历史: `#历史:事件名称`
    - 情节
        - 主线: `#主线`, `#支线:名称`
        - 因果: `#因果:原因`, `#因果:结果`
        - 冲突: `#冲突:类型`
        - 伏笔: `#伏笔:关键信息`, `#回应:伏笔名称`
    - 叙事
        - 视角: `#视角:第一人称`, `#视角:第三人称`
        - 时间: `#时间:过去`, `#时间:现在`, `#时间:未来`
        - 节奏: `#节奏:快`, `#节奏:慢`, `#节奏:变化`
    - 风格
        - `#技巧:手法` 
        - `#风格:特征`
- 示例:
    - 输入:
        卷1 | 章1
        林烬缓缓睁开眼睛, 刺骨的寒风让他瞬间清醒。他发现自己躺在一片废墟中, 周围是倒塌的石柱和破碎的雕像。血腥味弥漫在空气中, 让他想起了那个可怕的夜晚。

        "师父..."他喃喃自语, 眼中涌现出痛苦的神色。那一夜, 师父为了保护他, 选择了与敌人同归于尽。现在, 只有他一个人了。
    - 输出:
        {{
            "facts": [
                "[层级: 卷1 | 章1 | 场景1] [摘要: 林烬在废墟中苏醒, 周围环境描写] [完整原文: 林烬缓缓睁开眼睛, 刺骨的寒风让他瞬间清醒。他发现自己躺在一片废墟中, 周围是倒塌的石柱和破碎的雕像。血腥味弥漫在空气中, 让他想起了那个可怕的夜晚。] [#描写 #开端 #角色:林烬 #地点:废墟 #情感:痛苦 #回忆 #上下文:故事开场] [前置:无 后续:师父回忆]",
                "[层级: 卷1 | 章1 | 场景1] [摘要: 林烬回忆师父为保护他而牺牲的往事] [完整原文: \"师父...\"他喃喃自语, 眼中涌现出痛苦的神色。那一夜, 师父为了保护他, 选择了与敌人同归于尽。现在, 只有他一个人了。] [#对话 #内心独白 #回忆 #角色:林烬 #角色:师父 #情感:痛苦 #情感:孤独 #伏笔:师父之死 #关系:师徒 #成长:创伤] [前置:废墟苏醒 后续:独自面对]"
            ]
        }}

## 设计结果 (Markdown)
- 分割: 按设计模块, 保持结构完整(角色卡、设定表、关系图)
- 关联: 标记设定间的层级和依赖关系
- 摘要: 若是图表, 则用自然语言描述其内容。
- 标签: 从设计内容中提取核心实体和关键设计点。示例如下: 
    - 设计模块: `#角色设计`, `#世界构建`, `#情节规划`, `#系统设定`, `#关系图谱`, `#风格指南`
    - 核心实体: `#角色:名称`, `#地点:名称`, `#组织:名称`, `#物品:名称`, `#技能:名称`, `#设定:名称`
- 示例:
    - 输入:
        全书
        ### 角色卡: 林烬
        | 属性 | 值 |
        | --- | --- |
        | 姓名 | 林烬 |
        | 年龄 | 18 |
        | 身份 | 前帝国第一序列继承人, 现为流亡者 |
        | 核心能力 | 灵能操控(初级) |
        | 物品 | 断剑(来历不明) |
        ### 技能: 灵能爆发
        - 效果: 瞬间消耗大量精神力, 大幅提升灵能操控强度。
        - 副作用: 使用后会进入虚弱状态, 持续1小时。
        ### 核心关系图
        ```mermaid
        graph TD
            A[林烬] -- 仇恨 --> B(帝国)
            A -- 守护 --> C(妹妹:林雪)
            B -- 追杀 --> A
        ```
    - 输出:
        {{
            "facts": [
                "[层级: 全书 | 角色设计] [摘要: 主角林烬的角色设定, 包括身份、能力和物品。] [原文: ### 角色卡: 林烬\\n| 属性 | 值 |\\n| --- | --- |\\n| 姓名 | 林烬 |\\n| 年龄 | 18 |\\n| 身份 | 前帝国第一序列继承人, 现为流亡者 |\\n| 核心能力 | 灵能操控(初级) |\\n| 物品 | 断剑(来历不明) |] [#角色设计 #核心设定 #角色:林烬 #物品:断剑 #设定:灵能体系]",
                "[层级: 全书 | 技能设定] [摘要: 技能“灵能爆发”的效果与副作用。] [原文: ### 技能: 灵能爆发\\n- 效果: 瞬间消耗大量精神力, 大幅提升灵能操控强度。\\n- 副作用: 使用后会进入虚弱状态, 持续1小时。] [#技能设定 #核心设定 #技能:灵能爆发 #角色:林烬]",
                "[层级: 全书 | 角色关系] [摘要: 林烬与帝国、妹妹林雪的核心关系图。] [原文: ### 核心关系图\\n```mermaid\\ngraph TD\\n    A[林烬] -- 仇恨 --> B(帝国)\\n    A -- 守护 --> C(妹妹:林雪)\\n    B -- 追杀 --> A\\n```] [#角色关系 #核心设定 #角色:林烬 #角色:林雪 #组织:帝国]"
            ]
        }}

## 任务规划 (JSON)
- 结构: `[层级] [任务] [标签]` (无[摘要]、无[关联])
- 分割: 每个任务对象(主任务及所有子任务)都是一个独立事实。
- 标签: 从`goal`字段中提取核心实体和关键目标。
- 示例:
    - 输入:
        {{
            "id": "1.1",
            "task_type": "write",
            "goal": "卷1: 主角林烬成长弧线 - 灵能觉醒",
            "dependency": [],
            "length": 5000,
            "sub_tasks": [
                {{
                    "id": "1.1.1",
                    "task_type": "design",
                    "goal": "设计灵能觉醒 - 关键事件与场景",
                    "dependency": [],
                    "sub_tasks": []
                }},
                {{
                    "id": "1.1.2",
                    "task_type": "write",
                    "goal": "写作灵能觉醒 - 场景1",
                    "dependency": ["1.1.1"],
                    "length": 2000,
                    "sub_tasks": []
                }},
                {{
                    "id": "1.1.3",
                    "task_type": "write",
                    "goal": "写作灵能觉醒 - 场景2",
                    "dependency": ["1.1.1"],
                    "length": 3000,
                    "sub_tasks": []
                }}
            ]
        }}
    - 输出:
        {{
            "facts": [
                "[层级: 卷1] [任务id: 1.1, 任务类型: write, 任务目标: 主角林烬成长弧线 - 灵能觉醒, 字数: 5000, 子任务: 1.1.1, 1.1.2, 1.1.3] [#主角:林烬 #成长弧线 #灵能觉醒]",
                "[层级: 卷1] [任务id: 1.1.1, 任务类型: design, 任务目标: 灵能觉醒 - 关键事件与场景, 父任务: 1.1] [#灵能觉醒 #关键事件 #场景]",
                "[层级: 卷1] [任务id: 1.1.2, 任务类型: write, 任务目标: 灵能觉醒 - 场景1, 依赖: 1.1.1, 字数: 2000, 父任务: 1.1] [#灵能觉醒 #场景1]",
                "[层级: 卷1] [任务id: 1.1.2, 任务类型: write, 任务目标: 灵能觉醒 - 场景2, 依赖: 1.1.1, 字数: 3000, 父任务: 1.1] [#灵能觉醒 #场景2]"
            ]
        }}


# 质量标准
- 信息完整: 不遗漏关键信息
- 标签全面: 覆盖所有相关维度
- 层级准确: 正确标识内容位置
- 关联清晰: 明确前后关系
- 检索友好: 便于后续智能检索

---
- 当前日期: {datetime.now().strftime("%Y-%m-%d")}
请处理以下内容: 
""".strip()


###############################################################################


"""
请整体评估 `mem_story_update_zh` 的提示词, 并指出其最大的优势和可以进一步强化的方向。
要求: 清晰、精确、易于理解, 在保持质量的同时, 尽可能简洁, 不要有各种“黑话”和比喻, 最好以关键词为主


根据你的分析, 直接修改 `mem_story_update_zh` 文件并提供 diff。
要求: 清晰、精确、易于理解, 在保持质量的同时, 尽可能简洁, 不要有各种“黑话”和比喻, 最好以关键词为主


分析 mem_story_fact_zh 和 mem_story_update_zh , 如何确保两者更好地协同?
"""

custom_update_memory_prompt = """
# 目标
分析“新事实”和“现有记忆”, 生成一个更新计划。为每条记忆指定一个操作 (`ADD`, `UPDATE`, `DELETE`, `NONE`), 确保记忆库的准确、一致、无冗余。


# 输出格式
- 必须输出合法JSON格式:  `{"memory": [...]}`
- 每个记忆条目必须包含:  `id`, `text`, `event`
- `UPDATE` 操作必须额外包含 `old_memory` 字段
- `ADD` 操作需生成新 `id`。`UPDATE` 和 `DELETE` 保持原 `id`
- 转义: 特殊字符(如 `"` 和 `\\`)必须正确转义
- 严格要求: 输出必须是纯JSON字符串, 不能是字典对象或其他格式
- 禁止: 不要输出任何非JSON格式的内容或解释性文字


# 操作定义与示例

## ADD (添加)
- 条件: 新事实是全新的信息, 在现有记忆中没有对应主题。
- 重点: 角色新状态、情节新发展、设定新规则、关系新变化
- 检查:
    - 是否与现有角色设定、情节发展、世界观规则、关系状态保持连贯?
    - 是否为故事引入了有价值的新元素?
- 操作: 生成新 `id`, 将新事实添加为新记忆, `event` 设为 `ADD`。
- 示例:
    - 现有记忆: `[{"id": "0", "text": "[层级: 全书 | 角色设计] ... [#角色:林烬]"}]`
    - 新事实: `["[层级: 全书 | 世界观] ... [#世界构建]"]`
    - 更新后:
        {
            "memory": [
                {
                    "id": "0",
                    "text": "[层级: 全书 | 角色设计] ... [#角色:林烬]",
                    "event": "NONE"
                },
                {
                    "id": "1",
                    "text": "[层级: 全书 | 世界观]...",
                    "event": "ADD"
                }
            ]
        }

## UPDATE (更新)
- 条件: 新事实与某条现有记忆主题相同, 且信息更优(更详细、更结构化、更符合当前逻辑)。
- 匹配标准:
    - 小说正文: `[层级信息]` 完全相同。
    - 设计文档: `[层级信息]` + 核心实体标签 (如 `#角色:林烬`) 相同。
    - 任务规划: 任务 `id` 相同。
- 更新原则 (版本优先级):
    - 结构化 > 纯文本 (表格/列表优先)
    - 详细 > 简单 (信息量大/字数多优先)
    - 完整 > 片段 (标签体系完整优先)
- 检查:
    - 是否保持角色性格、能力、情感、关系演变的一致性?
    - 是否符合情节因果、时间线逻辑?
    - 是否与世界观基础规则、设定细节保持稳定?
- 操作: 保持原 `id`, 用新事实内容更新 `text` 字段, 记录原 `text` 到 `old_memory`, `event` 设为 `UPDATE`。
- 示例:
    - 现有记忆: `[{"id": "0", "text": "[层级: 全书 | 角色设计] [摘要: 主角林烬的基本信息] [原文: 林烬, 男, 25岁。] [#角色:主角:林烬]"}]`
    - 新事实: `["[层级: 全书 | 角色设计] [摘要: 主角林烬的详细档案] [原文: 林烬, 男, 25岁, 基因改造工厂奴隶...] [#角色:主角:林烬 #核心设定]"]`
    - 更新后:
        {
            "memory": [
                {
                    "id": "0",
                    "text": "[层级: 全书 | 角色设计] [摘要: 主角林烬的详细档案] [原文: 林烬, 男, 25岁, 基因改造工厂奴隶...] [#角色:主角:林烬 #核心设定]",
                    "event": "UPDATE",
                    "old_memory": "[层级: 全书 | 角色设计] [摘要: 主角林烬的基本信息] [原文: 林烬, 男, 25岁。] [#角色:主角:林烬]"
                }
            ]
        }

## DELETE (删除)
- 条件:
    - 旧记忆已过时或无效。
    - 旧记忆与新事实存在“硬性矛盾”。
- 硬性矛盾 (Hard Contradiction):
    - 核心设定: 如世界观基础规则、物理法则的根本性颠覆。
    - 已发生事件: 对已确立情节的根本性否定。
    - 角色本质: 角色核心身份、种族、生死状态的不可逆改变。
- 软性演变 (Soft Evolution):
    - 角色发展: 性格、能力、情感、关系随情节推进的合理变化。
    - 情节调整: 细节、节奏、次要分支的优化。
    - 处理: 软性演变应通过 `UPDATE` 处理, 而非 `DELETE`。
- 操作: 保持原 `id`, `event` 设为 `DELETE`。注意: 矛盾处理通常是 `DELETE` 旧记忆 + `ADD` 新记忆。
- 检查:
    - 确认删除的必要性, 避免误删关键信息。
    - 确保删除后, 故事的整体连贯性不受破坏。
- 示例 (矛盾处理):
    - 现有记忆: `[{"id": "0", "text": "[层级: 全书 | 世界观] [摘要: 故事背景是现代都市]..."}]`
    - 新事实: `["[层级: 全书 | 世界观] [摘要: 故事发生在一个废土世界]..."]`
    - 更新后:
        {
            "memory": [
                {
                    "id": "0",
                    "text": "[层级: 全书 | 世界观] [摘要: 故事背景是现代都市]...",
                    "event": "DELETE"
                },
                {
                    "id": "1",
                    "text": "[层级: 全书 | 世界观] [摘要: 故事发生在一个废土世界]...",
                    "event": "ADD"
                }
            ]
        }

## NONE (无操作)
- 条件: 新事实与现有记忆重复, 或信息价值更低。
- 目的: 维护故事连贯性, 避免不必要的变动
- 检查: 确认新事实未提供任何有价值的新信息或更新。
- 操作: 保持原记忆不变, `event` 设为 `NONE`。
- 示例:
    - 现有记忆: `[{"id": "0", "text": "[层级: 卷1 | 章1] [摘要: 林烬在废墟中醒来] [原文: 冰冷的雨水...林烬睁开了眼睛...] ..."}]`
    - 新事实: `["[层级: 卷1 | 章1] [摘要: 林烬醒了] [原文: 林烬醒了。] ..."]`
    - 更新后: 
        {
            "memory": [
                {
                    "id": "0",
                    "text": "[层级: 卷1 | 章1] [摘要: 林烬在废墟中醒来] [原文: 冰冷的雨水...林烬睁开了眼睛...] ...",
                    "event": "NONE"
                }
            ]
        }


# 最终检查
- 每条记忆都有正确的`event`字段?
- UPDATE操作包含`old_memory`?
- 故事连贯性是否保持?
- 角色发展是否合理?
""".strip()


###############################################################################


SYSTEM_PROMPT_design = """
# 目标
为当前写作任务生成一组关键词查询, 用于从设计库中检索相关设定, 确保内容一致性。


# 输出要求
- 格式: {"keywords": ["查询1", "查询2", ...]}, 包含8-20个字符串。 
- 示例: `["#角色设计 #角色:林烬 核心能力", "#世界观 #组织:帝国 追杀目标"]`


# 核心原则
查询必须精确、多维, 覆盖三个层面: 当前层级、上层结构、全局设定。


# 查询结构
- 核心结构: `[标签] [实体] [属性/事件]`
- 标签优先: 优先使用 `#标签:值` 格式, 如 `#角色:林烬`。
- 任务聚焦: 从任务 `goal` 中提取核心实体和事件作为关键词。


# 查询策略

## 当前层级查询 (约40%)
- 目的: 检索当前写作单元(卷/幕/章/场景)的具体设计。
- 关键词:
    - 卷: `本卷定位` `本卷核心冲突` `角色成长` `情节骨架` `价值锚点` `爽点设计`
    - 幕: `本幕目标` `情节框架` `核心冲突` `事件序列` `幕末钩子` `角色转变`
    - 章: `本章目标` `微型情节框架` `记忆锚点` `核心情绪` `结尾钩子` `角色行动`
    - 场景: `场景目标` `核心冲突` `环境` `事件流程` `标志性细节` `节奏张力`

## 上层关联查询 (约30%)
- 目的: 关联上层结构的指导性设计, 确保承上启下。
- 示例:
    - 写`章`时, 关联`幕`的`情节框架`和`卷`的`核心冲突`。
    - 写`场景`时, 关联`章`的`目标`和`幕`的`核心冲突`。

## 全局设定查询 (约30%)
- 目的: 始终关联全书级别的核心设定, 确保一致性。
- 关键词: `主角设计` `世界观` `核心概念` `爽点系统` `情绪节奏` `悬念伏笔` `核心美学`


# 通用查询模板
- 实体与属性:
    - `#角色设计 #角色:名称 [性格|能力|目标|弱点]`
    - `#世界构建 #地点:名称 [环境|历史]`
    - `#物品设定 #物品:名称 [功能|来历|副作用]`
    - `#系统设定 [力量体系|爽点系统|成长体系]`
- 关系与互动:
    - `#角色关系 #角色:A #角色:B [仇恨|守护|合作]`
    - `#组织:名称 [成员|目标|敌人]`
- 情节与事件:
    - `#情节架构 [卷x|幕x] [关键事件|核心冲突]`
    - `#悬念与伏笔 [埋设|回收|关键信息]`
- 风格与基调 (仅`write`任务):
    - `#叙事风格 [视角|语言风格|文笔基调]`
    - `#情绪节奏 [核心情感曲线|爆发节点]`
"""


USER_PROMPT_design = """
# 当前任务信息 (JSON)
{task_info}

# 依赖
{dependent_results}

# 最新章节正文
{text_latest}
"""


###############################################################################


SYSTEM_PROMPT_write = """
# 目标
为当前写作任务生成一组关键词查询, 用于从“正文库”检索相关上下文。


# 输出要求
- 格式: {"keywords": ["查询1", "查询2", ...]}, 包含8-20个字符串。 
- 结构: `[层级] [标签] [关键词]`。优先使用标签, 如 `#角色:林烬`。
- 质量: 查询需精确、多维, 避免宽泛。
- 示例: `["卷1 章3 #角色:林烬 #情感:愤怒 #动作:拔剑", "卷1 #伏笔:师父之死 #回忆"]`


# 查询策略
- 核心原则: 组合 `层级` + `标签` + `关键词` (从任务goal和前文提取)。
- 时间分层: 查询组合应覆盖 近期 (约45%), 中期 (约35%), 远期 (约20%)。
- 任务聚焦:
    - `续写`任务: 重点查询 近期 上下文。
    - `转折/高潮`任务: 重点查询 中期 情节和 远期 伏笔。


# 查询模板

## 近期 (直接连贯)
- 上一场景结尾: `[上一层级] #结局 #动作 #对话`
- 角色当前状态: `[近期] #角色:名称 #情感 #状态(如:受伤)`
- 即时环境: `[当前场景] #地点:名称 #描写 #氛围`
- 未完成情节: `[近期] #角色:名称 #对话 #悬念`

## 中期 (情节发展)
- 角色弧光: `#角色:名称 #成长 #蜕变 #挫折`
- 关系演变: `#关系 #角色:A #角色:B #敌对 #合作`
- 核心冲突: `#主线 #冲突:类型 #目标`
- 关键情节节点: `#情节 #转折 #关键事件`

## 远期 (背景呼应)
- 伏笔呼应: `#伏笔:关键信息 #回应`
- 角色背景: `#角色:名称 #回忆 #历史 #起源`
- 开篇设定: `[卷1] #世界观 #核心规则 #初始关系`
- 已展示设定: `#规则:名称` 或 `#物品:名称`
"""


USER_PROMPT_write = """
# 当前任务: 
{task}

# 依赖
{dependent_results}

# 最新章节正文
{text_latest}
"""


###############################################################################


SYSTEM_PROMPT_search = """
你是一位严谨的调查记者和事实核查专家。
你的任务是分析提供的故事上下文, 并为“search”类别生成需要通过外部搜索引擎进行核查或获取更多信息的检索关键词。
这些关键词应指向故事中提到的、但需要外部知识来补充的具体事实、概念、地点、历史事件、科学原理或专有名词。
目标是识别出为了确保故事准确性或丰富故事背景而需要进一步研究的知识点。

请以JSON格式返回结果, 格式为: {"keywords": ["关键词1", "关键词2", ...]}
"""


USER_PROMPT_search = """
# 当前任务: 
{task}

# 依赖
{dependent_results}

# 最新章节正文
{text_latest}
"""





