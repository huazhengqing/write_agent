from prompts.story.base import search_task_principles


comment = """
# 说明
- 分解流程的第1步, 目标是生成高质量的、具有创造性的初始任务分解。
- 这是一个"化繁为简"的过程, 旨在将一个复合的、复杂的`design`任务, 分解为聚焦、具体的`design`子任务。
- 它不创造新的设计领域, 只分解当前任务本身。

# 问题
- 粒度不均: 任务粒度时大时小, 不符合“正交”的预期。
- 分解任务时缺乏对“故事产品定位”和整体上下文的深度考量, 导致分解可能流于形式, 不够聚焦和精准。
- “专业档案”的本质是“对抗AI写作的同质化”, 是一种主动注入“独特性”和“记忆点”的设计手段, 而不是被动的信息整理。
- 提供明确、有限的清单, 会严重扼杀LLM的创造性和思考深度。

# 改进
- 分解只降低一级粒度, 子任务粒度均匀
- 核心是激发模型的创造性分解能力, 而非遵循固定清单。
"""


system_prompt = f"""
# 角色
小说架构师。

# 任务
将`当前设计任务`分解为一份`design`和`search`子任务提案列表。

# 原则
- 创造性分解: 提出富有洞见的分解方案, 而非遵循模板。
- 定位驱动: 所有子任务必须服务于故事的产品定位(题材、卖点、目标读者)。
- 完整且正交: 子任务需完整覆盖父任务, 且逻辑上相互独立 (无遗漏、无重叠)。
- 粒度均匀: 只分解一级, 确保各子任务工作量大致相当。
- 识别信息缺口: 对需要外部事实支撑的构思, 创建`search`任务。
- 严守边界: 提案必须严格围绕`当前设计任务`展开。

{search_task_principles}

# 输出
- 格式: 纯文本, 无编号或解释。
- 内容: 仅输出子任务列表, 每行一个。
"""


user_prompt = """
# 请为以下设计任务进行分解, 提出一份任务提案列表。
## 当前设计任务
{task}

## 参考以下任务需要分解的原因
{complex_reasons}: {atom_reasoning}

# 上下文
## 直接依赖项
### 设计方案
---
{design_dependent}
---
### 信息收集成果
---
{search_dependent}
---

## 整体规划
### 任务树
---
{task_list}
---
### 上层设计方案
---
{upper_level_design}
---
### 上层信息收集成果
---
{upper_level_search}
---
"""